generator client {
  provider      = "prisma-client-js"
  output        = "./generated"
  engineType    = "binary"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             BigInt                @id @unique
  username       String?
  discriminator  Int?
  nickname       String?
  joinedServerAt DateTime?
  messages       Message[]
  responses      AssociatesResponses[]
}

model Message {
  id        BigInt   @id @unique
  author    User     @relation(fields: [userId], references: [id])
  createdAt DateTime
  content   String
  userId    BigInt
  channelId BigInt
  guildId   BigInt
}

model AssociatesConfiguration {
  id               BigInt  @id @unique @default(autoincrement())
  categoryId       BigInt?
  associatesRoleId BigInt?
  retryDelayDays   Int?
}

model AssociatesQuiz {
  id        BigInt                @id @unique @default(autoincrement())
  createdAt DateTime
  updatedAt DateTime
  questions AssociatesQuestions[]
}

model AssociatesQuestions {
  id       BigInt                     @id @unique @default(autoincrement())
  question String
  choices  AssociatesQuestionChoice[]
  type     AssociatesQuestionTypes
  quiz     AssociatesQuiz             @relation(fields: [quizId], references: [id])
  quizId   BigInt
}

enum AssociatesQuestionTypes {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
}

model AssociatesQuestionChoice {
  id         BigInt              @id @unique @default(autoincrement())
  choice     String
  question   AssociatesQuestions @relation(fields: [questionId], references: [id])
  correct    Boolean
  questionId BigInt
}

model AssociatesResponses {
  id        BigInt   @id @unique @default(autoincrement())
  score     Int
  userId    BigInt
  channelId BigInt
  finished  Boolean
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime
  updatedAt DateTime
}
