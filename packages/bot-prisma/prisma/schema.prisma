generator client {
  provider      = "prisma-client-js"
  output        = "./generated"
  engineType    = "binary"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              BigInt                @id @unique
  username        String?
  discriminator   Int?
  nickname        String?
  joinedServerAt  DateTime?
  messages        Message[]
  roles           Roles[]
  responses       AssociatesResponses[]
  cooldownsReset  AssociatesResponses[] @relation("CooldownsReset")
  ticketBans      TicketBan[]
  degreesGiven    DegreeChanges[]       @relation("DegreesGiven")
  degreesReceived DegreeChanges[]       @relation("DegreesReceived")
}

model TicketBan {
  id        Int      @id @unique @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    BigInt
  givenBy   BigInt
  removedBy BigInt?
  reason    String
  active    Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        BigInt   @id @unique
  author    User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  content   String
  userId    BigInt
  channel   Channel  @relation(fields: [channelId], references: [id])
  channelId BigInt
  guildId   BigInt
}

model AssociatesConfiguration {
  id               Int     @id @unique @default(autoincrement())
  numQuestions     Int     @default(5)
  categoryId       BigInt?
  associatesRoleId BigInt?
  retryDelayDays   Int?
}

model AssociatesQuiz {
  id        Int                   @id @unique @default(autoincrement())
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  questions AssociatesQuestions[]
}

model AssociatesQuestions {
  id       Int                         @id @unique @default(autoincrement())
  question String
  choices  AssociatesQuestionChoices[]
  type     AssociatesQuestionTypes
  quiz     AssociatesQuiz              @relation(fields: [quizId], references: [id])
  quizId   Int
}

enum AssociatesQuestionTypes {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
}

model AssociatesQuestionChoices {
  id         Int                 @id @unique @default(autoincrement())
  choice     String
  question   AssociatesQuestions @relation(fields: [questionId], references: [id])
  correct    Boolean
  questionId Int
}

model AssociatesResponses {
  id            Int      @id @unique @default(autoincrement())
  score         Int
  maxScore      Int      @default(0)
  answerDict    Json     @default("{}")
  userId        BigInt
  channelId     BigInt
  finished      Boolean
  cdSkipped     Boolean  @default(false)
  cdSkippedBy   User?    @relation(fields: [cdSkippedById], references: [id], name: "CooldownsReset")
  cdSkippedById BigInt?
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Roles {
  id       BigInt  @id @unique
  name     String
  users    User[]
  persists Boolean @default(false)
}

model Channel {
  id        BigInt    @id @unique
  name      String?
  guildId   BigInt
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Degrees {
  ASSOCIATES
  BACHELORS
  MASTERS
  EXPERTS
  PHD
}

enum Actions {
  ADD
  REMOVE
}

model DegreeChanges {
  id        Int      @id @unique @default(autoincrement())
  action    Actions
  degree    Degrees
  from      User     @relation(fields: [fromId], references: [id], name: "DegreesGiven")
  fromId    BigInt
  to        User     @relation(fields: [toId], references: [id], name: "DegreesReceived")
  toId      BigInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
